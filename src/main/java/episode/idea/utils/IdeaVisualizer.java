/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package episode.idea.utils;

import br.unicamp.cst.core.entities.Memory;
import br.unicamp.cst.core.entities.MemoryContainer;
import br.unicamp.cst.core.entities.Mind;
import br.unicamp.cst.representation.idea.Idea;
import br.unicamp.cst.util.viewer.representation.idea.IdeaPanel;
import com.google.gson.Gson;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;
import java.util.List;
import java.util.logging.Logger;

/**
 * @author bruno
 */
public class IdeaVisualizer extends JFrame {

    private IdeaPanel ideaPanel;
    private final Mind mind;
    private final String printFolder;

    /**
     * Creates new form IdeaVisualizer
     */
    public IdeaVisualizer(Mind mind, String printFolderPrefix) {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.mind = mind;
        printFolder = printFolderPrefix;

        ideaPanel = new IdeaPanel(new Idea("root", ""), false);
        //wmp.setOpaque(true); //content panes must be opaque
        //this.setContentPane(wmp);
        jPanel2.setLayout(new BorderLayout());
        jPanel2.add(ideaPanel);
        jPanel2.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jList1 = new JList<>();
        jPanel2 = new JPanel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        list1Model = new DefaultListModel();
        jList1.setModel(list1Model);
        jList1.addListSelectionListener(this::jList1ValueChanged);
        jScrollPane1.setViewportView(jList1);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                                .addContainerGap())
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 284, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        String memoryName = jList1.getSelectedValue();
        Optional<Memory> selectedMem = mind.getRawMemory().getAllMemoryObjects()
                .stream().filter(m -> m.getName().equalsIgnoreCase(memoryName))
                .findFirst();
        if (selectedMem.isPresent()) {
            Memory memory = selectedMem.get();
            synchronized (memory) {
                Object content = memory.getI();
                if (selectedMem.get() instanceof MemoryContainer){
                    List<Memory> memorieList = ((MemoryContainer) selectedMem.get()).getAllMemories();
                    Idea allContent = new Idea(memoryName, "");
                    for (Memory mem : memorieList){
                        allContent.add((Idea) mem.getI());
                    }
                    content = allContent;
                } else if (content instanceof Idea) {
                    setIdea(new Gson().fromJson(IdeaHelper.jsonPrint((Idea) content, false), Idea.class));
                } else if (content instanceof ArrayList) {
                    Idea show = new Idea(memoryName, "");
                    ArrayList<Idea> listContent = (ArrayList<Idea>) content;
                    if (!listContent.isEmpty()) {
                        show.setL(listContent);
                    }
                    setIdea(new Gson().fromJson(IdeaHelper.jsonPrint(show, false), Idea.class));
                } else if (content instanceof LinkedList) {
                    Idea show = new Idea(memoryName, "");
                    LinkedList<Idea> listContent = (LinkedList<Idea>) content;
                    if (!listContent.isEmpty()) {
                        show.getL().addAll(listContent);
                    }
                    setIdea(new Gson().fromJson(IdeaHelper.jsonPrint(show, false), Idea.class));
                } else if (content instanceof Map){
                    Map<String, List<Idea>> internal = (Map<String, List<Idea>>) content;
                    Idea show = new Idea(memoryName, "");
                    for (Map.Entry<String,List<Idea>> entry : internal.entrySet()){
                        Idea obj = new Idea(entry.getKey(), "", "AbstractObject", 1);
                        obj.setL(entry.getValue());
                        show.add(obj);
                    }
                    setIdea(new Gson().fromJson(IdeaHelper.jsonPrint(show, false), Idea.class));
                } else {
                    Logger.getLogger(IdeaVisualizer.class.getName()).severe(String.format("Visualization for class %s not implemented\n", content.getClass().getName()));
                }
            }

        }
    }//GEN-LAST:event_jList1ValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JList<String> jList1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private DefaultListModel list1Model;
    // End of variables declaration//GEN-END:variables

    public void setIdea(Idea idea) {
        PrintWriter out;
        try {
            File printFile = new File("./ideas_out/" + printFolder);
            printFile.mkdirs();
            out = new PrintWriter(printFile + "/" + idea.getName());
            String json = IdeaHelper.jsonPrint(idea, false);
            out.println(json);
            out.close();
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        System.out.println("Print");
        ideaPanel = new IdeaPanel(idea, false);
        if (!idea.getL().isEmpty())
            ideaPanel.updateTree();
        ideaPanel.expandAllNodes();
        jPanel2.removeAll();
        jPanel2.add(ideaPanel);
        jPanel2.revalidate();
        revalidate();
    }

    public void addMemoryWatch(String memoryName){
        list1Model.addElement(memoryName);
    }

    public void printAllMemories(){
        for (int i=0; i < jList1.getModel().getSize(); i++){
            jList1.setSelectedIndex(i);
        }
    }
}
